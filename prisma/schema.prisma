// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VerificationType {
  PASSWORD_RESET
  VERIFY_EMAIL
  CHANGE_EMAIL
  WELCOME
}

enum Status {
  FREE
  PENDING
  BOOKED
  CANCELLED
}

enum Form {
  TABLET
  SOLUTION
  CAPSULE
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum Route {
  ORAL
  INJECTION
  TOPICALLY
}

enum Role {
  PATIENT
  ADMIN
  DOCTOR
  NURSE
}

model Admin {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Appointment {
  id            String    @id @default(uuid())
  Patient       Patient   @relation(fields: [patientId], references: [id])
  patientId     String
  dateTime      String
  Doctor        Doctor    @relation(fields: [doctorId], references: [id])
  doctorId      String
  holdExpiresAt DateTime
  holdId        String
  status        Status    @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt()
  Billing       Billing[]
  Record        Record?

  @@unique([doctorId, dateTime])
  @@index([dateTime(sort: Asc)])
}

model AuditLogs {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  userId    String
  action    String
  entity    String
  entityId  String
  updatedAt DateTime @updatedAt()
}

model Billing {
  id            String        @id @default(uuid())
  createdAt     DateTime      @default(now())
  userId        String
  amount        Int
  status        PaymentStatus
  User          User          @relation(fields: [userId], references: [id])
  updatedAt     DateTime      @updatedAt()
  Appointment   Appointment   @relation(fields: [appointmentId], references: [id])
  appointmentId String
}

model Department {
  id             String   @id @default(uuid())
  name           String
  specialization String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt()
  Doctor         Doctor[]
}

model Doctor {
  id             String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt()
  Appointment    Appointment[]
  Department     Department    @relation(fields: [departmentId], references: [id])
  Record         Record[]
  specialization String
  User           User          @relation(fields: [userId], references: [id])
  userId         String        @unique
  departmentId   String
}

model GeoData {
  id        String @id @default(uuid())
  userId    String @unique
  country   String
  continent String
  region    String
  city      String
  User      User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Hold {
  id        String   @id @default(uuid())
  patientId String
  doctorId  String
  expiresAt DateTime
}

model MedicalRecord {
  id        String   @id @default(uuid())
  Patient   Patient  @relation(fields: [patientId], references: [id])
  patientId String   @unique
  phone     String
  address   String
  gender    String
  version   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  Record    Record[]
}

model Medication {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  name      String
  dosage    String
  form      Form
  route     Route[]
  note      String
  amount    String
  recordId  String
  Record    Record   @relation(fields: [recordId], references: [id])
}

model Patient {
  id            String         @id @default(uuid())
  User          User           @relation(fields: [userId], references: [id])
  userId        String         @unique
  Appointment   Appointment[]
  MedicalRecord MedicalRecord?
}

model Record {
  id              String        @id @default(uuid())
  medicalRecordId String
  ailment         String        @default("Unknown")
  symptoms        String[]
  testRequired    Boolean       @default(false)
  appointmentId   String        @unique
  storageId       String?
  Doctor          Doctor        @relation(fields: [doctorId], references: [id])
  doctorId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt()
  Medication      Medication[]
  Appointment     Appointment   @relation(fields: [appointmentId], references: [id])
  MedicalRecord   MedicalRecord @relation(fields: [medicalRecordId], references: [id])
}

model Session {
  id          String   @id @default(uuid())
  userId      String
  devicePrint String?
  token       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User {
  id               String              @id @default(uuid())
  email            String              @unique
  password         String
  role             Role[]              @default([PATIENT])
  speakeasySecret  String?
  firstName        String
  lastName         String
  provider         String              @default("")
  emailVerified    Boolean             @default(false)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  twoFactorSetup   Boolean             @default(false)
  Sessions         Session[]
  verificationCode VerificationCodes[]
  geoData          GeoData?
  Patient          Patient?
  Billing          Billing[]
  Doctor           Doctor?
  Admin            Admin?
}

model VerificationCodes {
  id         String           @id @default(uuid())
  User       User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  code       String           @unique()
  type       VerificationType
  userId     String
  createdAt  DateTime         @default(now())
  expiresAt  DateTime
  verifiedAt DateTime?
  codeUsed   Boolean          @default(false)
}
